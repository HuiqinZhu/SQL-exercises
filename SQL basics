SELECT * FROM Customers;
SELECT CustomerName, City FROM Customers;

SELECT DISTINCT Country FROM Customers;

SELECT COUNT(DISTINCT Country) FROM Customers;

SELECT Count(*) AS DistinctCountries
FROM (SELECT DISTINCT Country FROM Customers);


SELECT * FROM Customers
WHERE Country='Britain';

SELECT * FROM Customers
WHERE CustomerID=2;

SELECT * FROM Customers
WHERE NOT Country='Mexico';

SELECT * FROM Customers
WHERE City='Berlin' OR City='München';

SELECT * FROM Customers
WHERE Country='Germany' OR Country='Spain';

SELECT * FROM Customers
WHERE Country='Germany' AND (City='Tokyo' OR City='München');

SELECT * FROM Customers
WHERE NOT Country='Germany' AND NOT Country='USA';

SELECT * FROM Customers
ORDER BY Country;

SELECT * FROM Customers
ORDER BY Country, CustomerName;

SELECT * FROM Customers
ORDER BY Country DESC;

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;

SELECT TOP 3 * FROM Customers;

SELECT TOP 50 PERCENT * FROM Customers;

SELECT TOP 3 50 PERCENT * FROM Customers
WHERE Country='Germany';

SELECT * FROM Customers
LIMIT 3;

SELECT TOP 3 50 PERCENT * FROM Customers
WHERE Country='Germany'
LIMIT 3;

SELECT * FROM Customers
WHERE ROWNUM <= 3;


SELECT MIN(Price) AS SmallestPrice
FROM Products;

SELECT MAX(Price) AS LargestPrice
FROM Products;

--average 
SELECT AVG(Price)
FROM Products;

SELECT SUM(Quantity)
FROM OrderDetails;

--select things ending with "a"
SELECT * FROM Customers
WHERE CustomerName LIKE '%a';

--select things starting with "a" and are at least 3 characters in length
SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%';

--select things starting with "a" and are at least 2 characters in length
SELECT * FROM Customers
WHERE CustomerName LIKE 'a_%';

--select all customers with a City starting with "b", "s", or "p"
--"[]" means containing one of those 
SELECT * FROM Customers
WHERE City LIKE '[bsp]%';

--select all customers with a City NOT starting with "b", "s", or "p"
SELECT * FROM Customers
WHERE City LIKE '[!bsp]%';

--select all customers with a City starting with "a", "b", or "c"
--"-" can stand for "from...to"
SELECT * FROM Customers
WHERE City LIKE '[a-c]%';


SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

--NOT
SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');

--nested
SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

SELECT * FROM People
WHERE Name BETWEEN 'Koto' AND 'Hope'
ORDER BY Age;


INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;

UPDATE Customers
SET ContactName = 'Huiqin Zhu', City= 'Tokyo'
WHERE CustomerID = 1;




DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

--delete all:
DELETE FROM Customers;


SELECT CustomerName AS Customer, ContactName AS [Contact Person]
FROM Customers;


SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;

SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName
FROM Customers, Orders
WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;

--same as above
SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;




SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;


SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);


SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;

SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;


SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
ORDER BY COUNT(CustomerID) DESC;


SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;


SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5
ORDER BY COUNT(CustomerID) DESC;


SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);



SELECT ProductName
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity > 99);


SELECT ProductName
FROM Products
WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

SELECT * INTO CustomersGermany
FROM Customers
WHERE Country = 'Germany';


INSERT INTO Customers (CustomerName, City, Country)
SELECT SupplierName, City, Country FROM Suppliers;


--condition 
--very convenient
SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;

SELECT CustomerName, City, Country
FROM Customers
ORDER BY
(CASE
    WHEN City IS NULL THEN Country
    ELSE City
END);



CREATE DATABASE testDB;

BACKUP DATABASE testDB
TO DISK = 'D:\backups\testDB.bak';

DROP DATABASE testDB;


CREATE TABLE TestTable AS
SELECT customername, contactname
FROM customers;


--columnName + datatype
CREATE TABLE Persons (
    PersonID int,
    LastName varchar(255),
    FirstName varchar(255),
    Address varchar(255),
    City varchar(255)
);


ALTER TABLE Customers
ADD Email varchar(255);

ALTER TABLE Persons
ADD DateOfBirth date;

ALTER TABLE Customers
DROP COLUMN Email;

DROP TABLE Persons;

